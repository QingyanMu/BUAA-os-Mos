void lab3_kill(u_int env_id)
{
        // get e_now and e_root
        struct Env *e_now;
        struct Env *e_root;
        envid2env(env_id, &e_now, 0);

        u_int root_id = e_now->env_parent_id;
        envid2env(root_id, &e_root, 0);

        // while this "root" have a father
        while (e_root->env_parent_id != 0) {
                root_id = e_root->env_parent_id;
                envid2env(root_id, &e_root, 0);
        }

        // now we get the root
        int now_son_num = e_now->son_num;
        int root_son_num = e_root->son_num;

        int i = 0;

        // remove from father, careful!: root == father
        struct Env *e_fa;
        u_int fa_id = e_now->env_parent_id;
        envid2env(fa_id, &e_fa, 0);
        // get the index
        for (i = 0; i < e_fa->son_num; i++) {
                if (e_fa->son_id_arr[i] == env_id) {
                        break;
                } else {
                        continue;
                }
        }

        // cover
        for (; i < e_fa->son_num-1; i++) {
                e_fa->son_id_arr[i] = e_fa->son_id_arr[i+1];
        }
        e_fa->son_id_arr[i] = 0;
        e_fa->son_num--;


        // attach all sons to root
        for (i = 0; i < now_son_num; i++) {
                u_int now_son_id = e_now->son_id_arr[i];
                e_root->son_id_arr[e_root->son_num] = now_son_id;
                e_root->son_num += 1;
        }

        // free the env
        e_now->son_num = 0;
        for (i = 0; i < e_now->son_num; i++) {
                e_now->son_id_arr[i] = 0;
        }
        e_now->env_status = ENV_FREE;
        e_now->env_cr3 = 0;
        e_now->env_pgdir = 0;

        // maybe i should add, then i can pass
        LIST_INSERT_HEAD(&env_free_list, e, env_link);

}
